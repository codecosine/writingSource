(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{341:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"深入javascript-类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深入javascript-类型转换"}},[t._v("#")]),t._v(" 深入JavaScript-类型转换")]),t._v(" "),s("h2",{attrs:{id:"引言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[t._v("#")]),t._v(" 引言")]),t._v(" "),s("blockquote",[s("p",[t._v("墙后的阴影，总是最让人感觉恐怖的。")])]),t._v(" "),s("p",[t._v("人们对JavaScript中最大的偏见,最多的指责,莫过于这强制类型转换了。它承受了如此多的指责，因为他很魔幻，很反直觉，或者说让你失去直觉。")]),t._v(" "),s("ul",[s("li",[t._v("没错，这就是一个很烂的特性。")]),t._v(" "),s("li",[t._v("我勇于探索是因为人总是好奇的。")]),t._v(" "),s("li",[t._v("我尽量避免去使用的，因为代码是给人看的，而不是仅仅给机器进行执行的。")]),t._v(" "),s("li",[t._v("为了类型转换而转换，何必呢。")])]),t._v(" "),s("h2",{attrs:{id:"提出的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提出的问题"}},[t._v("#")]),t._v(" 提出的问题")]),t._v(" "),s("p",[t._v("1.抛开一切稀奇古怪的面试题，尽量去想。在什么情况下，你需要使用通过类型转换获得代码的便利？\n2.我们所说的类型转换和 == 宽松等于有什么区别？或者说，在什么情况下会发生类型转换？\n")]),t._v(" "),s("p",[t._v("我们先来看一道题目")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("请问上面输出什么？")]),t._v(" "),s("h2",{attrs:{id:"toboolean-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#toboolean-运算符"}},[t._v("#")]),t._v(" ToBoolean 运算符")]),t._v(" "),s("p",[t._v("ToBoolean 运算会将下列的值转换为false(ES5.1规范-9.1小节ToBoolean)\n有且仅有下面这几个值")]),t._v(" "),s("ul",[s("li",[t._v("undefined null")]),t._v(" "),s("li",[t._v("false")]),t._v(" "),s("li",[t._v("+-0 NaN")]),t._v(" "),s("li",[t._v('""\n也就是primitive value中双空三值的“直觉”情况。\n请务必牢记关键词'),s("strong",[t._v("有且仅有")])])]),t._v(" "),s("h3",{attrs:{id:"toboolean运算发生的expression表达式情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#toboolean运算发生的expression表达式情况"}},[t._v("#")]),t._v(" ToBoolean运算发生的expression表达式情况")]),t._v(" "),s("ul",[s("li",[t._v('显式的 Boolean() 以及"显式"的 !! 当然 ! 也会发生Toboolean运算，然后取反')]),t._v(" "),s("li",[t._v("if(expression)  while(expression) for(..;expression;..😉 do while等各种循环体条件判断中的表达式")]),t._v(" "),s("li",[t._v("三元表达式 expression?a:b")]),t._v(" "),s("li",[t._v("逻辑运算符中的 逻辑或，逻辑与 ||  &&  左边的操作数expression会发生转换，请注意只有左边")]),t._v(" "),s("li",[s("strong",[t._v("显式类型转换发生在静态类型语言的编译时，强制类型转换发生在动态类型语言的运行时")])])]),t._v(" "),s("h3",{attrs:{id:"容易发生误会的真值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容易发生误会的真值"}},[t._v("#")]),t._v(" 容易发生误会的真值")]),t._v(" "),s("ul",[s("li",[t._v('"false"， "0"， "\'\'"')]),t._v(" "),s("li",[t._v("[]，{}，[0]：")]),t._v(" "),s("li",[s("strong",[t._v("[]虽然是真值,但是在ToPromitive解析中却返回的是假值")])]),t._v(" "),s("li",[s("strong",[t._v("{}在ToPromitive解析中却返回的是真值")])]),t._v(" "),s("li",[t._v("function(){}，new Boolean(false)")]),t._v(" "),s("li")]),t._v(" "),s("h3",{attrs:{id:"与-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#与-运算符"}},[t._v("#")]),t._v(" || 与 && 运算符")]),t._v(" "),s("p",[t._v("JavaScript中的逻辑运算符和别的语言有一些重要的差别")]),t._v(" "),s("ul",[s("li",[t._v("它返回的并不是布尔值,可能你用过很多次都理所当然的认为是")]),t._v(" "),s("li",[t._v("其实只是返回后在条件表达式中理所当然的进行了隐式的布尔转换")]),t._v(" "),s("li",[t._v("它的返回值是两个操作数的一个,即选择两个操作数中的一个")]),t._v(" "),s("li",[t._v("所以也有人称这个运算符为选择运算符")])]),t._v(" "),s("p",[t._v("首先对第一个操作数ToBoolean后执行条件判断")]),t._v(" "),s("ul",[s("li",[t._v("|| 的第一个操作数判断情况：如果true 返回第一个,否则返回第二个")]),t._v(" "),s("li",[t._v("&& 的第一个操作数判断情况：如果false 返回第一个,否则返回第二个")])]),t._v(" "),s("h2",{attrs:{id:"宽松相等-和严格相等-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宽松相等-和严格相等-运算符"}},[t._v("#")]),t._v(" 宽松相等 == 和严格相等 === 运算符")]),t._v(" "),s("blockquote",[s("p",[t._v("一个常见的误区是 == 检查值是否相等, === 检查值和类型是否相等。听起来蛮有道理，但是远不够准确。")])]),t._v(" "),s("blockquote",[s("p",[t._v("上面这个误区导致的更为严重的误区是，==，=== 是运算符。你使用这个运算符，希望得到的是，比较的结果是相等，还是不等（布尔值），==允许在相等比较中进行强制类型转换，而===不允许。而不是简单的左右两边都进行ToBoolean运算，是按照一定的规则进行强制类型转换。")])]),t._v(" "),s("p",[s("strong",[t._v("换句话说，上面我们说的很多假值，ToBoolean运算，在==这边的比较是按规则才会发生的。")])]),t._v(" "),s("h3",{attrs:{id:"宽松-比较规则（个人归纳）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宽松-比较规则（个人归纳）"}},[t._v("#")]),t._v(" 宽松 == 比较规则（个人归纳）")]),t._v(" "),s("ul",[s("li",[t._v("A == B 等价于 B == A ，除了A与B的执行顺序。")]),t._v(" "),s("li",[t._v("A != B 等价于 !(A==B) 。")]),t._v(" "),s("li",[t._v("null == undefined // true  出现null undefined会短路直接判断类型")]),t._v(" "),s("li",[t._v("相等运算符不总是传递的。")]),t._v(" "),s("li",[t._v("Number > String (String类型总是转换为Number来比较) （见7")]),t._v(" "),s("li",[t._v("Number > Boolean (Boolean类型总是转换为Number来比较) （见8")]),t._v(" "),s("li",[t._v("ToPrmitive > Object （Object类型总是先进行ToPrimitive转换）")])]),t._v(" "),s("h3",{attrs:{id:"toprimitive-valueof优先"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#toprimitive-valueof优先"}},[t._v("#")]),t._v(" toPrimitive[valueof优先]")]),t._v(" "),s("ul",[s("li",[t._v("1.检查是否有valueof方法")]),t._v(" "),s("li",[t._v("2.如果有，则使用valueof函数返回的值进行以上规则的宽松比较（请务必注意，例如Valueof返回false，false还会按比较规则进行toNumber等操作）")]),t._v(" "),s("li",[t._v("3.如果没有就使用toString()方法的返回值进行以上规则的宽松比较(因为是Object原型方法，所以一般情况会有)")]),t._v(" "),s("li",[t._v("4.因此使用 Object.create(null)产生的对象无法进行强制类型转换")]),t._v(" "),s("li",[t._v("5.常见例子 [] => valueof返回[]不是基础类型=> toString 返回 “”=> 空字符串进行toNumber返回0")]),t._v(" "),s("li",[t._v("6.请警惕下面的代码 运算符另一边出现null时是直接进行类型判断的")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),s("h4",{attrs:{id:"知识补充-》array-prototype-tostring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#知识补充-》array-prototype-tostring"}},[t._v("#")]),t._v(" 知识补充=》Array.prototype.toString")]),t._v(" "),s("p",[t._v("方法返回每个元素的值并进行toPrimitive[toString优先]，使用逗号连接（请注意外部不会有[]这样的括号）\n请注意 undefined,null返回空字符串，[]会返回[object Object]")]),t._v(" "),s("h3",{attrs:{id:"tostring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[t._v("#")]),t._v(" toString")]),t._v(" "),s("p",[t._v("显示转换String()返回都是基本的值的字符串值,完全一致,用的比较自然，这里不再提。\n"),s("strong",[t._v("String显式转换最大的坑是toPrimitive是先执行toString的")])]),t._v(" "),s("ul",[s("li",[t._v("undefined => 'undefined'")]),t._v(" "),s("li",[t._v("null => 'null'")]),t._v(" "),s("li",[t._v("1 => '1'")]),t._v(" "),s("li",[t._v("对象进行toPrimitive的另一种形式：请务必注意先执行toString,在执行ValueOf")])]),t._v(" "),s("h3",{attrs:{id:"tonumber"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tonumber"}},[t._v("#")]),t._v(" toNumber")]),t._v(" "),s("p",[t._v("事实上宽松比较最需要用的就是ToNumber\n而不是假值定义的ToBoolean")]),t._v(" "),s("ul",[s("li",[t._v("true 转换为1")]),t._v(" "),s("li",[t._v("false 转换为0")]),t._v(" "),s("li",[t._v("undefined 转换为 NaN //容易忘记被骗成0")]),t._v(" "),s("li",[t._v("null 转换为0 // 容易弄混")]),t._v(" "),s("li",[t._v("字符串比较复杂 ECMA9.3.1简单说是 空白字符串转换为0，010只会按十进制，0x会按16进制，“Infinity”这样的常量值也可以得到转换，而除此以外都是NAN")]),t._v(" "),s("li",[t._v("对象进行toPrimitive")])]),t._v(" "),s("p",[s("strong",[t._v("简单说数字最大,但是数字的比较最为严格")])]),t._v(" "),s("p",[t._v('1.字符串和布尔值在比较中均转换toNumber继续比较\n// 个人建议 在任何情况下都不要使用 == 布尔值,因为布尔值一定会被优先转换成数字\n2.null 与 undefined 宽松相等,可以相互进行隐式转换\n//但是和所谓的 "" false 不等,原因见1\n3.对象在比较中 toprimitive操作(valueOf>toString)\n4.请时刻注意自己是在进行toNumber toBoolean toprimitive操作的哪一种\n令人窒息的一些非常规情况')]),t._v(" "),s("p",[t._v("有兴趣可以看下面的ECMA规范,我加入了部分注释方便观看")]),t._v(" "),s("h4",{attrs:{id:"ecmascript5-1-11-9-1-the-equals-operator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript5-1-11-9-1-the-equals-operator"}},[t._v("#")]),t._v(" ECMAScript5.1 11.9.1 The Equals Operator ( == )")]),t._v(" "),s("p",[t._v("产生式 EqualityExpression : EqualityExpression == RelationalExpression 按照下面的过程执行 :")]),t._v(" "),s("ul",[s("li",[t._v("令 lref 为解释执行 EqualityExpression 的结果 .")]),t._v(" "),s("li",[t._v("令 lval 为 GetValue(lref).")]),t._v(" "),s("li",[t._v("令 rref 为解释执行 RelationalExpression 的结果 .")]),t._v(" "),s("li",[t._v("令 rval 为 GetValue(rref).")]),t._v(" "),s("li",[t._v("返回做用相等比较算法于 rval == lval( 参见 11.9.3) 的结果")])]),t._v(" "),s("p",[t._v("简单说是就是 == 两边都进行RHS右值查询。也就是这种方式可以强制比较：")]),t._v(" "),s("ul",[s("li",[t._v('字符串比较可以按这种方式强制执行: "" + a == "" + b 。')]),t._v(" "),s("li",[t._v("数值比较可以按这种方式强制执行: +a == +b 。")]),t._v(" "),s("li",[t._v("布尔值比较可以按这种方式强制执行: !a == !b 。")])]),t._v(" "),s("h4",{attrs:{id:"_11-9-3-抽象相等比较算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-9-3-抽象相等比较算法"}},[t._v("#")]),t._v(" 11.9.3 抽象相等比较算法")]),t._v(" "),s("p",[t._v("比较运算x==y, 其中x和 y是值，产生true或者false。这样的比较按如下方式进行：")]),t._v(" "),s("p",[t._v("1.若Type(x)与Type(y)相同， 则")]),t._v(" "),s("ul",[s("li",[t._v("a.若Type(x)为Undefined， 返回true。")]),t._v(" "),s("li",[t._v("b.若Type(x)为Null， 返回true。\n2.若Type(x)为Number， 则")]),t._v(" "),s("li",[t._v("a.若x为NaN， 返回false。")]),t._v(" "),s("li",[t._v("b.若y为NaN， 返回false。")]),t._v(" "),s("li",[t._v("c.若x与y为相等数值， 返回true。")]),t._v(" "),s("li",[t._v("d.若x 为 +0 且 y为−0， 返回true。")]),t._v(" "),s("li",[t._v("e.若x 为 −0 且 y为+0， 返回true。")]),t._v(" "),s("li",[t._v("f.其他情况返回false。\n3.若Type(x)为String, 则")]),t._v(" "),s("li",[t._v("当x和y为完全相同的字符序列时返回true。其他情况返回false。 // （长度相等且相同字符在相同位置）")])]),t._v(" "),s("blockquote",[s("p",[t._v("字符串比较使用的方式是简单地检测字符编码单元序列是否相同。不会做更复杂的、基于语义的字符或者字符串相等的定义以及Unicode规范中定义的collating order。所以Unicode标准中认为相等的String值可能被检测为不等。实际上这一算法认为两个字符串已经是经过规范化的形式。\n"),s("strong",[t._v("4.若Type(x)为Boolean, 当x和y为同为true或者同为false时返回true。 否则， 返回false。")]),t._v("\n5.当x和y为引用同一对象时返回true。否则，返回false。\n6.若x为null且y为undefined， 返回true。若x为undefined且y为null， 返回true。\n7.若Type(x) 为 Number 且 Type(y)为String， 返回 x == ToNumber(y)的结果。\n若Type(x) 为 String 且 Type(y)为Number，返回比较ToNumber(x) == y的结果。\n8.若Type(x)为Boolean， 返回比较ToNumber(x) == y的结果。\n若Type(y)为Boolean， 返回比较x == ToNumber(y)的结果。\n9.若Type(x)为String或Number，且Type(y)为Object，返回比较x == ToPrimitive(y)的结果。\n若Type(x)为Object且Type(y)为String或Number， 返回比较ToPrimitive(x) == y的结果。\n10.其他情况返回false。")])]),t._v(" "),s("h3",{attrs:{id:"严格等于"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#严格等于"}},[t._v("#")]),t._v(" === 严格等于")]),t._v(" "),s("h3",{attrs:{id:"ecma-严格等于运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ecma-严格等于运算符"}},[t._v("#")]),t._v(" ECMA 严格等于运算符 ( === )")]),t._v(" "),s("p",[t._v("比较 x===y，x 和 y 为值，需要产出 true 或 false。比较过程如下：")]),t._v(" "),s("ul",[s("li",[t._v("如果 Type(x) 与 Type(y) 的结果不一致，返回 false，否则\n如果 Type(x) 结果为 Undefined，返回 true\n如果 Type(x) 结果为 Null，返回 true\n如果 Type(x) 结果为 Number，则\n如果 x 为 NaN，返回 false\n如果 y 为 NaN，返回 false\n如果 x 与 y 为同一个数字，返回 true\n如果 x 为 +0，y 为 -0，返回 true\n如果 x 为 -0，y 为 +0，返回 true\n返回 false\n如果 Type(x) 结果为 String，如果 x 与 y 为完全相同的字符序列（相同的长度和相同的字符对应相同的位置），返回 true，否则，返回 false\n如果 Type(x) 结果为 Boolean，如果 x 与 y 都为 true 或 false，则返回 true，否则，返回 false\n如果 x 和 y 引用到同一个 Object 对象，返回 true，否则，返回 false\n此算法与 SameValue 算法在对待有符号的零和 NaN 上表现不同。")])]),t._v(" "),s("blockquote",[s("p",[t._v("很多人说，只要JavaScript发生比较，永远不要使用宽松等于==。我赞同这种做法，却不喜欢这种说法。你将==视为魔鬼，它只会跟着你，摆脱不掉，永远在阴影中，甚至会出来咬你一口。\n"),s("a",{attrs:{href:"http://dorey.github.io/JavaScript-Equality-Table/",target:"_blank",rel:"noopener noreferrer"}},[t._v("github上的比较记忆图表"),s("OutboundLink")],1),t._v("你还需要这个吗？不需要了？很愚蠢真的。emmm...好像已经跑题好远拉，大家可以回过头再去看那道题目。")])]),t._v(" "),s("p",[t._v("以上，例题解析请见下一篇~")]),t._v(" "),s("p",[t._v("各种奇怪的题目")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("答案")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 都进行数字转换")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 都进行数字转换")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 左边数组转字符后转数字为0,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// false 左边转为 "[object Object]" 转NAN')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 右边发生ToBoolean运算取反，真值取反为false ,然后同第三题")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 右边ToString 返回'2'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ture 特别提醒[null] toString 返回 "" toNumber 0')]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);