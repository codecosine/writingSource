(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{340:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"类型与值-值与引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型与值-值与引用"}},[t._v("#")]),t._v(" 类型与值-值与引用")]),t._v(" "),s("h2",{attrs:{id:"引言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[t._v("#")]),t._v(" 引言")]),t._v(" "),s("p",[t._v("JavaScript变量都是按值传递？\n这个问题事实上很让人困扰，其实大家也进行了很多的总结归纳。\n说来滑稽，得到很多“权威”的解释后，我依然云里雾里，在经过一波几折后的折腾研究，才真正理解。\n这个说法我第一次看到的时候是在小红书，当时作者语气十分强烈。连续举例来引起读者关注，当时给出的例子是这样的。\n")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ted"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    obj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"marry"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'newobj'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { name: 'ted' }")]),t._v("\n")])])]),s("p",[t._v("最终的person 没有因为obj = new Object而被修改。\n特意强调了一下，很多程序员因为obj.name能操作就以为函数是按引用传递的，就大错特错了。\n我也记了下来，还特意加了注释")]),t._v(" "),s("ul",[s("li",[t._v("基本数据类型(Number,String)会按值传递")]),t._v(" "),s("li",[t._v("引用数据类型(Object,Array)会按引用地址值传递")])]),t._v(" "),s("h2",{attrs:{id:"中转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中转"}},[t._v("#")]),t._v(" 中转")]),t._v(" "),s("p",[t._v("这件事情烙下一个印，在后面我看小黄书的时候，又再一次发现了这个概念，这次的说法却是：")]),t._v(" "),s("ul",[s("li",[t._v("标量原值 scalar primitive 总是通过值复制的方式来赋值/传递，包括:null undefined number boolean string symbol")]),t._v(" "),s("li",[t._v("复合值 compound value 总是通过引用复制的方式来赋值/传递，包括:object,array Object,function")])]),t._v(" "),s("p",[t._v("这个时候我意识到，当时小红书的说法是有非常大的误解的，虽然这个误解比较大可能是因为翻译不准确的缘故。转念一想，按引用地址值传递和引用复制传递，其实说的也是一回事。反正现象就是这个现象，知道就好了嘛^^")]),t._v(" "),s("h2",{attrs:{id:"所以为什么有这个问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#所以为什么有这个问题"}},[t._v("#")]),t._v(" 所以为什么有这个问题")]),t._v(" "),s("p",[t._v("在逛知乎的时候看到了这个问题，有人提出了相似的疑问。这次的回答给出了比较容易让人理解的说法：\n复合值的传递事实上有三种方式：")]),t._v(" "),s("ul",[s("li",[t._v("1.将参数的值完全复制一份，按值传递\n对于传递过来的变量进行修改等各种操作，不会影响到函数外原变量。\nPHP就是使用的这种方式")]),t._v(" "),s("li",[t._v("2.将参数的地址复制一份，按值传递地址，即**引用复制（reference-copy）**传递\nJavaScript就是这种方式，我就不再解释了")]),t._v(" "),s("li",[t._v("3、对于参数的完全引用传递\n也就是C语言中指针的感觉\n特征：无论是对于变量成员的修改，还是对变量重新赋值，都会影响到原对象。")])]),t._v(" "),s("p",[t._v("到这里问题就介绍了。")]),t._v(" "),s("p",[t._v("然而到这里，我突然才发现，这个问题对于我来说其实不是值怎么传的问题。\n因为问题早就已经解决掉了，我也没有很大的疑惑。")]),t._v(" "),s("h3",{attrs:{id:"这个问题的特殊性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#这个问题的特殊性"}},[t._v("#")]),t._v(" 这个问题的特殊性")]),t._v(" "),s("p",[t._v("引用，地址，值，指针。\n事实上对于我来说这些概念十分的模糊且带有直觉性。\n当然很大程度是因为中文的说法本身带有的语义性。如果原先没有对概念有清晰的认识的话，很容易受到你熟悉语言的直觉干扰。")]),t._v(" "),s("h3",{attrs:{id:"重新认识赋值“-”"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重新认识赋值“-”"}},[t._v("#")]),t._v(" 重新认识赋值“=”")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\nb"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jack'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c\nd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'peter'")]),t._v("\nd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Bob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[t._v("小红书《JavaScript高级程序设计》")]),t._v(" "),s("li",[t._v("《你不知道的JavaScript》部分章节")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.zhihu.com/question/51018162",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript中函数都是值传递吗？"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);